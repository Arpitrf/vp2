from abc import ABCMeta, abstractmethod

import numpy as np
import h5py

from vp2.mpc.utils import ObservationList


class BaseEnv(metaclass=ABCMeta):
    @abstractmethod
    def __init__(self):
        pass

    @abstractmethod
    def reset(self):
        pass

    @abstractmethod
    def reset_to(self, state):
        """
        Reset the environment to a given state and environment model (e.g. XML)
        This is called with the initial_state returned by the goal_generator at the beginning
        of each task instance to ensure that the environment model and state (e.g. object poses) are
        correct.
        """
        pass

    @abstractmethod
    def reset_state(self, state):
        """
        Reset the environment to a given state. Do not reset the environment model (e.g. XML)
        :param state: The state to reset to
        :return: an observation after resetting to the given state
        """
        pass

    @abstractmethod
    def step(self, action):
        """
        step() function for the environment, following the OpenAI Gym API
        """
        pass

    @abstractmethod
    def compute_score(self, state, goal_state):
        """
        Compute a score between the current state and the goal state.
        Lower is better.
        This function can be called at any current environment state,
        so it should not depend on the current environment state (self.)
        :param state: State to score
        :param goal_state: Goal state to score against, generated by the goal_generator
        :return: a single scalar score (lower is better)
        """
        pass

    @abstractmethod
    def get_state(self):
        """
        :return: A low-dimensional state representation of the environment that can be used to reset the environment
        """
        pass

    @property
    def action_dimension(self):
        pass

    @property
    def observation_shape(self):
        pass

    @property
    def metadata(self):
        """
        Used to fit API specifications, but does not need to be implemented
        """
        return None

    def goal_generator(self):
        """
        :return: An iterator that returns a tuple of three objects for a different task at each iteration:
        1) The starting state of the environment for the task
        2) The goal state of the environment for the task
        3) The observation image corresponding to the goal state of the environment for the task, as an ObservationList
        """
        pass

    def goal_generator_from_robosuite_hdf5(self, file_path, camera_name):
        """
        Create a goal generator from a robosuite-formatted hdf5 file.
        :param file_path: path to hdf5 goal file
        :param camera_name: name of the camera feed to load goal RGB, depth, etc. from.
        :return: generator object which yields a tuple of (start state, goal state, goal obs) for a different task
        at each iteration
        """
        f = h5py.File(
            file_path, "r", driver="core"
        )  # core prevents MP collision, but should just load in at once?
        demos = list(f["data"].keys())
        inds = np.argsort([int(elem[5:]) for elem in demos])
        demos = [demos[i] for i in inds]
        for ind in range(len(demos)):
            ep = f"demo_{ind + 1}"
            # load states
            states = f["data/{}/states".format(ep)][()]
            # load all goal images
            goals = dict()
            if self.env_hparams["goal_ims_from_data"]:
                goal_im_source = f[f"data/{ep}/goal_obs"]
            else:
                goal_im_source = f[f"data/{ep}/obs"]

            for modality in self.env_hparams["planning_modalities"]:
                if modality == "rgb":
                    goals[modality] = goal_im_source[f"{camera_name}_image"][:] / 255.0
                elif modality == "depth":
                    goals[modality] = goal_im_source[f"{camera_name}_depth"][:]
                    if goals[modality].shape[-1] != 1:
                        # Happens only for the iGibson renderer, TODO make cleaner
                        goals[modality] = goals[modality][..., None]
                elif modality == "normal":
                    normal_goals = goal_im_source[f"{camera_name}_normal"][:] / 255.0
                    goals[modality] = normal_goals
            goals = ObservationList(goals)

            # Determine which state from the trajectory or initial state to use as the start state
            # First, if the data contains start indices, use those
            if "start_index" in f[f"data/{ep}"]:
                start_idx = f[f"data/{ep}/start_index"][()]
                print(f"Using start index {start_idx} loaded from task benchmark!")
            # Otherwise, use the index specified in the hyperparameters
            else:
                if self.env_hparams["traj_start_idx"] == 1:
                    raise ValueError(
                        "Trajectory start index must be specified in hyperparameters if not in the goal dataset"
                    )
                else:
                    print(
                        f"Using default start index {self.env_hparams['traj_start_idx']} from config"
                    )
                    start_idx = self.env_hparams["traj_start_idx"]

            initial_state = dict(states=states[start_idx])
            initial_state["model"] = f[f"data/{ep}"].attrs.get("model_file", None)

            # Use either the final goal image or entire image sequence as the goal
            if self.env_hparams["use_final_goal_img"]:
                goals = goals[-1]
            else:
                goals = goals[start_idx:]

            goal_state = states[-1]

            yield initial_state, goal_state, goals

    def goal_generator_from_og_hdf5(self, file_path, camera_name):
        """
        Create a goal generator from a robosuite-formatted hdf5 file.
        :param file_path: path to hdf5 goal file
        :param camera_name: name of the camera feed to load goal RGB, depth, etc. from.
        :return: generator object which yields a tuple of (start state, goal state, goal obs) for a different task
        at each iteration
        """
        print("goal generator file path: ", file_path)
        f = h5py.File(
            file_path, "r", driver="core"
        )  # core prevents MP collision, but should just load in at once?
        demos = list(f['data'].keys())
        print("demos: ", demos)
        # inds = np.argsort([int(elem[5:]) for elem in demos])
        # demos = [demos[i] for i in inds]
        for ind, ep in enumerate(demos):
            # load all goal images
            goals = dict()
            if self.env_hparams["goal_ims_from_data"]:
                goal_im_source = f[f"data/{ep}/goal_obs"]
            else:
                goal_im_source = f[f"data/{ep}/observations"]

            # remove later. making goal image fixed
            goal_im_source = f[f"data/episode_00015/observations"]

            for modality in self.env_hparams["planning_modalities"]:
                # TODO: check why we neeed /255 here
                if modality == "rgb":
                    goals[modality] = goal_im_source["rgb"][:] / 255.0
                elif modality == "depth":
                    goals[modality] = goal_im_source[f"{camera_name}_depth"][:]
                    if goals[modality].shape[-1] != 1:
                        # Happens only for the iGibson renderer, TODO make cleaner
                        goals[modality] = goals[modality][..., None]
                elif modality == "normal":
                    normal_goals = goal_im_source[f"{camera_name}_normal"][:] / 255.0
                    goals[modality] = normal_goals
            goals['rgb'] = goals['rgb'][:, :, :, :3]
            print("episode, all observations: ", ep, goals['rgb'].shape)
            goals = ObservationList(goals)

            # Determine which state from the trajectory or initial state to use as the start state
            # First, if the data contains start indices, use those
            if "start_index" in f[f"data/{ep}"]:
                start_idx = f[f"data/{ep}/start_index"][()]
                print(f"Using start index {start_idx} loaded from task benchmark!")
            # Otherwise, use the index specified in the hyperparameters
            else:
                if self.env_hparams["traj_start_idx"] == 1:
                    raise ValueError(
                        "Trajectory start index must be specified in hyperparameters if not in the goal dataset"
                    )
                else:
                    print(
                        f"Using default start index {self.env_hparams['traj_start_idx']} from config"
                    )
                    start_idx = self.env_hparams["traj_start_idx"]

            # print("start_idx: ", start_idx)
            # TODO: load states
            directory_path = '/'.join(file_path.split('/')[:-1])
            # print("directory_path: ", directory_path)
            initial_state = f'{directory_path}/{ep}_start.json'
            goal_state = f'{directory_path}/{ep}_end.json'

            # Use either the final goal image or entire image sequence as the goal
            if self.env_hparams["use_final_goal_img"]:
                # change later!!
                # goals = goals[-1]
                goals = goals[8]

            else:
                goals = goals[start_idx:]

            yield initial_state, goal_state, goals
